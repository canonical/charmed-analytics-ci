name: Tests

on:
  workflow_call:
    secrets:
      CHACI_TEST_TOKEN:
        required: true
      CHACI_GPG_PRIVATE:
        required: true
      CHACI_GPG_PASSPHRASE:
        required: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: pipx install tox
      - name: Run linters
        run: tox -e lint

  unit-test:
    name: Unit tests
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: pipx install tox
      - name: Run tests
        run: tox -e unit

  integration:
    name: Integration tests (microk8s)
    runs-on: ubuntu-24.04
    env:
      CHACI_TEST_TOKEN: ${{ secrets.CHACI_TEST_TOKEN }}
      CHACI_TEST_REPO: canonical/test-kubeflow-automation
      CHACI_TEST_BASE_BRANCH: test-rocks-automation
      CHACI_TEST_EMAIL: kubeflow-admin@lists.canonical.com
    steps:
      - uses: actions/checkout@v4

      - name: Set up GPG key and passphrase
        run: |
          # Create a directory for GnuPG configuration
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Import the private GPG key
          echo "${{ secrets.CHACI_GPG_PRIVATE }}" | gpg --batch --import

          # Configure GPG to use a "passphrase file" or a "pinentry-loopback"
          # We'll use pinentry-loopback, which allows the passphrase to be piped directly.
          # This requires configuring gpg-agent.

          # Start gpg-agent in a detached mode, if not already running
          # (GitHub Actions environments usually start with a fresh state, but good to be explicit)
          gpg-agent --daemon --allow-loopback-pinentry --pinentry-program /usr/bin/pinentry-loopback > ~/.gnupg/gpg-agent.conf
          # Source the config to set up GPG_AGENT_INFO
          source ~/.gnupg/gpg-agent.conf

          # Configure git to use the GPG key for signing
          git config --global user.signingkey "${{ secrets.CHACI_TEST_EMAIL }}" # Replace with the actual GPG key ID if known, otherwise email associated with key
          git config --global commit.gpgsign true
          git config --global user.email "${{ env.CHACI_TEST_EMAIL }}" # Ensure this matches the GPG key's email
          git config --global user.name "ckfbot" # Or a suitable name

          # Tell gpg-agent to cache the passphrase.
          # The passphrase will be provided once via --passphrase-fd 0
          # This command ensures the key is in the agent's cache for subsequent signing operations.
          # We use a dummy sign operation to prime the agent.
          echo "${{ secrets.CHACI_GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --local-user "${{ secrets.CHACI_TEST_EMAIL }}" --armor --sign -o /dev/null /dev/null
        env:
          # Set the GPG_TTY for tty-related interactions, useful for pinentry
          GPG_TTY: /dev/tty

      - run: pipx install tox

      - name: Run integration tests
        run: tox -vve integration