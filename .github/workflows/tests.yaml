name: Tests

on:
  workflow_call:
    secrets:
      CHACI_TEST_TOKEN:
        required: true
      CHACI_GPG_PRIVATE:
        required: true
      CHACI_GPG_PASSPHRASE:
        required: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: pipx install tox
      - name: Run linters
        run: tox -e lint

  unit-test:
    name: Unit tests
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: pipx install tox
      - name: Run tests
        run: tox -e unit

  integration:
    name: Integration tests (microk8s)
    runs-on: ubuntu-24.04
    env:
      CHACI_TEST_TOKEN: ${{ secrets.CHACI_TEST_TOKEN }}
      CHACI_TEST_REPO: canonical/test-kubeflow-automation
      CHACI_TEST_BASE_BRANCH: test-rocks-automation
      CHACI_TEST_EMAIL: kubeflow-admin@lists.canonical.com
    steps:
      - uses: actions/checkout@v4

      - name: Install gpg-preset-passphrase
        run: |
          if ! command -v gpg-preset-passphrase &>/dev/null; then
            sudo install -m 755 -o root -g root /usr/lib/gnupg2/gpg-preset-passphrase /usr/bin/
          fi

      - name: Setup GPG and Git commit signing
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Configure gpg-agent
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

          # Import the private key
          if echo "$CHACI_GPG_PRIVATE" | grep -q '^-----BEGIN PGP'; then
            echo "$CHACI_GPG_PRIVATE" | gpg --batch --import
          else
            echo "$CHACI_GPG_PRIVATE" | base64 --decode | gpg --batch --import
          fi

          # Extract key fingerprint and keygrip
          FINGERPRINT=$(gpg --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')
          KEYGRIP=$(gpg --with-keygrip --list-secret-keys "$FINGERPRINT" | awk '/Keygrip/ {print $2; exit}')

          # Cache passphrase in gpg-agent
          echo "$CHACI_GPG_PASSPHRASE" | /usr/bin/gpg-preset-passphrase --preset "$KEYGRIP"

          # Set trust level to ultimate (5)
          echo -e "trust\n5\ny\nsave" | gpg --batch --yes --pinentry-mode loopback --command-fd 0 --edit-key "$FINGERPRINT"

          # Git configuration for commit signing
          git config --global user.name "Canonical CI Bot"
          git config --global user.email "$CHACI_TEST_EMAIL"
          git config --global user.signingkey "$FINGERPRINT"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
        env:
          CHACI_GPG_PRIVATE: ${{ secrets.CHACI_GPG_PRIVATE }}
          CHACI_GPG_PASSPHRASE: ${{ secrets.CHACI_GPG_PASSPHRASE }}
          CHACI_TEST_EMAIL: ${{ env.CHACI_TEST_EMAIL }}

      - run: pipx install tox

      - name: Run integration tests
        run: tox -vve integration
